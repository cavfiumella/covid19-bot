#!/usr/bin/env python3.9

"""Runner script.
Call `./run --help | -h` to get help.
"""


from _version import get_version
from helpers.bot import MyBot

from argparse import ArgumentParser
import logging
from logging import getLogger
from traceback import format_exc
import sys
from typing import Dict, Optional, Any
from pathlib import Path
import pickle as pkl
import json


LOGGER = getLogger(__name__)
__version__ = get_version()


def run(token, test: bool = False) -> int:
    """Run bot.

    Parameters:
    - token: Telegram API token
    - test: run in test mode
    """

    if test:
        mybot = MyBot(
            token, pkl_path="bot_test.pkl", do_not_disturb=("00:00", "00:01")
        )
    else:
        mybot = MyBot(token)

    mybot.start()
    mybot.idle() # wait signal that stops bot

    return 0


if __name__ == "__main__":

    parser = ArgumentParser()

    # options
    parser.add_argument(
        "-T", "--test", action="store_true", help="Run bot in test mode"
    )
    parser.add_argument("-D", "--debug", action="store_true")
    parser.add_argument("-v", "--version", action="store_true")
    parser.add_argument(
        "-t", "--token", type=str,
        help="Telegram API token or path to file containing it"
    )

    args = parser.parse_args()
    log_level = logging.INFO

    if args.debug:
        log_level = logging.DEBUG

    logging.basicConfig(
        format="%(asctime)s %(name)s: %(message)s", level=log_level
    )

    if args.version:
        print(f"Version {__version__}")
        sys.exit()

    if not args.token:
        print("Token is required to start the bot!", file=sys.stderr)
        sys.exit(1)

    if Path(args.token).exists() and Path(args.token).is_file():
        with Path(args.token).open() as file:
            LOGGER.debug(f"Reading token from \"{args.token}\"")
            args.token = file.read().strip("\n")
            LOGGER.debug(f"Token: \"{args.token}\"")

    exit_code = -1

    while exit_code < 0: # keep bot running
        try:
            exit_code = run(args.token, args.test)
        except:
            LOGGER.critical(f"Fatal error: {format_exc()}")

            # stop bot on fatal errors
            if args.debug or args.test:
                exit_code = 1

    sys.exit(exit_code)
